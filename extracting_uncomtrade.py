# -*- coding: utf-8 -*-
"""extracting-uncomtrade.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y7nSy6epMS3M8OllHgDDdIFFp8NBMReL
"""

import requests
import json
import pandas as pd
import time

def query(dicc):
  
  """Returns a string formatted as the query that it is needed for the API-CALL"""

  # Input: dictionary with the specifications to extract data
  # --> Output: Query (string) to use.
  
  dicc = json.dumps(dicc)
  remove = '{}" '

  for r in remove:
    dicc = dicc.replace(r, '').replace(':', '=').replace(',','&')
    query = dicc

  return query

def months(year=int, period=None):

  """
  Returns a list of strings that represent each month of a year.
  Since we can't use complex queries, we have to be specific in the time
  period from which we are attempting to get data. For this reason, 
  this function was created for the purpose of iterating it to create
  a list of queries (each query having a different time period specified).
  """

  # Input: Year = 1990
  # --> Output: List of Time Periods = [199001, 199002, 199003, 199004 ... 199012]

  keys = ['JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY',\
          'AUGUST', 'SEPTEMBER', 'OCTOBER',  'NOVEMBER', 'DECEMBER']
  values = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
  months = {keys[i]:values[i] for i in range(len(keys))}

  if period==None:
    return [str(year)+month for month in months.values()]

  if type(period) == str:
    return str(year)+months[period]

def dicc_zones():
    
    """
    Returns a dictionary with all the ids and names for each of the zones/areas
    that report data to the UN COMTRADE.
    """

    # --> Output: Dictionary = {'id':'zone'} = {'484':'Mexico'}

    zones = requests.get('https://comtrade.un.org/Data/cache/partnerAreas.json')
    zones = zones.json()['results'] 
    
    values = []
    
    for zone in zones:
      for (k,v) in zone.items():
        values.append(v)
    
    values = iter(values)
    id_zone_dicc = dict(zip(values, values))

    return id_zone_dicc

def all_query(time=list, zone='484'):
  
  """
  Returns a list of generated queries.
  Right now the function is formatted strictly to get all the totals of all 
  the commodities that were traded by Mexico since 1990, which is the year
  that Mexico started reporting its data to the United Nations.
  """

  # Input: years to be explored 
  # --> Output: List of Time Periods = [199001, 199002, 199003, 199004 ... 199012]

  period_years = list(range(1990, 2010))
  period_months = list(range(2010, 2021))

  check_years = all(item in period_years for item in time)
  check_months =  all(item in period_months for item in time)

  if check_months == True:
    freq = 'M'
  if check_years == True:
    freq = 'A'

  list_of_queries = []

  for year in time:
    
    keys = ['type', 'freq', 'px', 'ps', 'r', 'p', 'rg', 'cc']
    values = ['C', freq, 'HS', str(year), zone, 'all', 'all', 'TOTAL']
    
    query_dict = {keys[i]:values[i] for i in range(len(keys))}
    query_final = query(query_dict)
    
    list_of_queries.append(query_final)

  return list_of_queries

def api_getting(api=str, queries=list):
  
  """
  Returns a concatenated dataframe with all data collected
  (from each query a dataframe is created)
  """

  # Input: api, list of specific queries
  # --> Output: Concatenated Pandas Dataframe with all the data collected.

  dfs = []

  for query in queries:

    response = requests.get(f'{api}{query}')
    time.sleep(1)
    data = pd.DataFrame(response.json()['dataset'])
    dfs.append(data)
  
  dataframe_api = pd.concat(dfs, axis=0, ignore_index=True)  

  return dataframe_api

def data_extraction():

  """
  Returns the results in a concatenated dataframe.
  Right now the function is formatted to gather all data reported by Mexico
  from 1990 to 2020. Remember that the data from 1990 to 2009 was reported 
  annually, and from 2010 to 2020, we have access to the data of each month.
  """

  """
  The difference between the past function and this one relies on the fact
  that this one is arranged to extract all data reported by Mexico. 
  The past function is open to receive any type of queries regarding any other
  country or a specific time period.
  """

  time_months = list(range(2010, 2021))
  time_years = list(range(1990, 2010))

  final_queries_months = all_query(time_months)
  final_queries_years = all_query(time_years)

  api = 'http://comtrade.un.org/api/get?'
  
  results_months = api_getting(api, final_queries_months)
  results_years = api_getting(api, final_queries_years)

  results = pd.concat([results_months, results_years], axis=0, ignore_index=True)

  return results

def data_prettifier(dataframe):

  """
  Returns a dataframe cleaned, by eliminating unnecessary/repeated data, and 
  also by formatting data so that we can later perform various analyses through
  pivot tables and graphs ...
  """

  # Input: Dataframe with all the raw data extracted from the API.
  # --> Output: Concatenated Pandas Dataframe with useful data, in a reliable format.

  data_copy = dataframe.copy()

  data_copy = data_copy[['period', 'rgDesc', 'rtTitle', 'ptTitle', 'cmdDescE', 'TradeValue']]
    
  data_copy.columns = ['Period', 'Regimen', 'Country', 'Partner','Commodity', 'Trade Value']
    
  data_copy['Period'] = data_copy['Period'].astype(str)
  
  """
  months = data_copy[data_copy['Period'].apply(lambda x: len(x)==6)].index
  years = data_copy[data_copy['Period'].apply(lambda x: len(x)==4)].index

  data_copy.loc[months,'Period'] = pd.to_datetime(data_copy.loc[months,'Period'], format='%Y%m', errors='coerce').dt.to_period('m')
  data_copy.loc[years,'Period'] = pd.to_datetime(data_copy.loc[years,'Period'], format='%Y', errors='coerce').dt.to_period('Y')
  """

  data_copy['Trade Value'] = data_copy['Trade Value'].astype(float)

  return data_copy

def time_period(trade_data):
  
  """
  Formats time periods into pd.datetime
  """

  # Input: '2019', '201901'
  # --> Output: 2019, 2019-01

  trade_data['Period'] = trade_data['Period'].astype(str)

  months = trade_data[trade_data['Period'].apply(lambda x: len(x)==6)].index
  years = trade_data[trade_data['Period'].apply(lambda x: len(x)==4)].index

  trade_data.loc[months,'Period'] = pd.to_datetime(trade_data.loc[months,'Period'], format='%Y%m', errors='coerce').dt.to_period('m')
  trade_data.loc[years,'Period'] = pd.to_datetime(trade_data.loc[years,'Period'], format='%Y', errors='coerce').dt.to_period('Y')

  return trade_data
